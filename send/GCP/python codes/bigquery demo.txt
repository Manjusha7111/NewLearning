foreign key:


create table BITest.customer
(
  Cust_id integer NOT NULL  ,
  Cust_name string NOT NULL,
  dealer_number integer  NOT NULL,
PRIMARY KEY(Cust_id)NOT ENFORCED
);
------
create table BITest.sales
(
 Sales_id integer NOT NULL  ,
 Cust_id integer NOT NULL  ,

FOREIGN KEY(Cust_id) REFERENCES BITest.customer(Cust_id) NOT ENFORCED
);
-----
insert into `BITest.customer` values(1,'A',101),
(2,'B',102),(3,'C',103);

-----
insert into `BITest.sales` values(101,1),
(102,2),(103,3),(104,1),(8,108);
----
SELECT
 *
FROM
  `bfsi-ai-data-usecase-98uh7.BITest.customer` as c
INNER JOIN
  `bfsi-ai-data-usecase-98uh7.BITest.sales` as s
ON
  c.Cust_id=s.Cust_id;


_______________________________________________________________
python for 2 tables:
from google.cloud import bigquery
client=bigquery.Client(project="qwiklabs-gcp-03-3660f9116494")
q="""
SELECT
 *
FROM
  `BITest.customer` as c
INNER JOIN
  `BITest.sales` as s
ON
  c.Cust_id=s.Cust_id;
"""
query_job=client.query(q)
res=query_job.result()
for i in res:
    print(i)
____________________________________________________

COUNTRY:

create table BITest.country
(
  Currency_code string,
  Country_code string,
  id integer,
  

)
OPTIONS(
  
  description="MY TABLE"
);


insert into `BITest.country` values('ANDORRA','AND336',103),
('ANGUILLA','ANGUI336',104),
('ARGENTINA','ARGE4',105),
('AUSTRALIA','AUS463',106),
('BELGIUM','BELGI336',107),	
('BHUTAN','BHUTA62',108),
('ERITREA','ERI265',112),
('FRANCE','FRAN27627',113),
('GEORGIA','GEOR26',114),
('COLOMBIA','COLO5536',110),
('HAITI	','HA2622',115),
('INDIA','IND27233',116),
('COLOMBIA','COLO5536',110),
('DENMARK','DENM252',111),
('IRELAND','IRELAN723',117),
('JAPAN','JAPA522',118),
('KUWAIT','KUWA262',119),
('LIBYA','LIB622',120),
('MALAYSIA','MALAY32',121),
('MAURITIUS','MAU3767',122),
('MEXICO','MEXI37',123),
('NEPAL','NEP323',124),
('NIGERIA','NIGE333',125),
('PALAU','PALA76',126),
('ROMANIA','ROMA334',127),

('THAILAND','THAI3332',129),
('ROMANIA','ROM1213',130);

+++++

create table BITest.vechile
(
  Brand string,
  Model string,
  dealer_number integer,
  reg_no integer,
  year  integer ,
  id  integer

)
OPTIONS(
  
  description="MY TABLE"
);



insert into `BITest.vechile` values('AlfaRomeo','Spider',1,7426,1967,101),
('Fiat','Coupe',2,6233,1977,102	),
('Citroen','Pluriel',3,1467,1989,103),
('Citroen','Pluriel',4,6633,1985,104),
('Skoda','Favorit',5,1000,1980,106),	
('Skoda','Octavia',6,	6667,	1999,108),
('Citroen','Saxo',7,6000,1972,107),
('Opel','Corsa',8,6467,1996,105),
('Citroen','Pluriel',9,1464,1983,109);

++++++++++++

cars -upload
car-copy


ALTER TABLE `BITest.cars` ADD PRIMARY KEY (Capid) NOT ENFORCED;



______________________________
                              JOINS
sql query for 2 tables

SELECT
 *
FROM
  `BITest.vechile` as vech
INNER JOIN
  `BITest.country` as cou
ON
  vech.id=cou.id;
_______________________________
sql query for 3 tables

SELECT
 v.Brand,
 v.Model,
 c.Country_code,
 c.id,
 v.id
FROM
  `BITest.vechile` as v
INNER JOIN

  `BITest.country` as c
ON
v.id=c.id
INNER JOIN

  `BITest.car` as ca
ON

  v.id=ca.Capid;
________________________________--
                                CODES
python for 2 tables:


from google.cloud import bigquery
client = bigquery.Client()
query = """SELECT
 cou.Currency_code as ddd
FROM
  `BITest.vechile` as vech
INNER JOIN
  `BITest.country` as cou
ON
  vech.id=cou.id;
"""


job_config = bigquery.QueryJobConfig(
    destination="qwiklabs-gcp-03-3660f9116494.BITest.d2", write_disposition='WRITE_TRUNCATE')

query_job = client.query(query, job_config=job_config)
query_job.result()  # Waits for job to complete
print('Query results loaded back into mydataset.mytable')
_____________________________________________
python for 3 tables:

from google.cloud import bigquery
client=bigquery.Client(project="qwiklabs-gcp-03-3660f9116494")
q="""
SELECT
 v.Brand,
 v.Model,
 c.Country_code,
 c.id,
 v.id
FROM
  `BITest.vechile` as v
INNER JOIN

  `BITest.country` as c
ON
v.id=c.id
INNER JOIN

  `BITest.car` as ca
ON

  v.id=ca.Capid;
"""
query_job=client.query(q)
res=query_job.result()
for i in res:
    print(i)
_____________________________
python for select * 1 tables:

from google.cloud import bigquery
client=bigquery.Client(project="bfsi-ai-data-usecase-98uh7")
q="SELECT * FROM `bfsi-ai-data-usecase-98uh7.BITest.dealer` LIMIT 10 "
query_job=client.query(q)
res=query_job.result()
for i in res:
    print(i)
___
from google.cloud import bigquery
client=bigquery.Client()
q="""
SELECT * FROM `qwiklabs-gcp-03-3660f9116494.BITest.dealer` LIMIT 10  
"""
query_job=client.query(q)
res=query_job.result()
for i in res:
    print(i)


both working
____________________________________


working code for calender:

from google.cloud import bigquery
client = bigquery.Client()
query = """SELECT
  date,
  GENERATE_UUID() AS Unique_Key,
  ROW_NUMBER() OVER() AS Date_Id,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  EXTRACT(DAY FROM date) AS Year_day,
  EXTRACT(WEEK FROM date) AS Year_Week,
  EXTRACT(MONTH FROM date) AS Year_month,
  EXTRACT(YEAR FROM date) AS Year,
  FORMAT_DATE("%A", date) as Week_Full_Week,
  FORMAT_DATE("%B", date) as Month_Full_Week,
  EXTRACT(QUARTER FROM date) AS year_Qtr,
  EXTRACT(month from date_add(date, interval (12-4)+1 month)) as Fiscal_Month,
  case when EXTRACT(MONTH FROM  date)>=4 then EXTRACT(YEAR FROM  date)
  ELSE EXTRACT(YEAR FROM  date)-1
  END As FISCAL_YEAR,
  DATE_ADD(date, INTERVAL 100 YEAR) AS After_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS Before_hun_yrs,
  FORMAT_DATE("%Y/%B",date) AS Yearmonth,
  FORMAT_DATE("%Y%m", date) as Y_m,
  FORMAT_DATE("%y%b%d",date) AS Full_date1,
FROM UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-03-31')) AS date 
ORDER BY Date"""

job_config = bigquery.QueryJobConfig(
    destination="qwiklabs-gcp-03-3660f9116494.BITest.dd", write_disposition='WRITE_TRUNCATE')

query_job = client.query(query, job_config=job_config)
query_job.result()  # Waits for job to complete
print('Query results loaded back into mydataset.mytable')
________________________________________________________


'bfsi-ai-data-usecase-98uh7.BITest1.ddrow101'



****runing joins and saving result in other table****:

from google.cloud import bigquery
client = bigquery.Client()
query = """SELECT
 v.Brand as ab,
 v.Model as bd,
 c.Country_code as cd,
 c.id as vv,
 v.id as ff
FROM
  `BITest.vechile` as v
INNER JOIN

  `BITest.country` as c
ON
v.id=c.id
INNER JOIN

  `BITest.car` as ca
ON

  v.id=ca.Capid;
"""


job_config = bigquery.QueryJobConfig(
    destination="qwiklabs-gcp-03-3660f9116494.BITest.ddatedemo", write_disposition='WRITE_TRUNCATE')

query_job = client.query(query, job_config=job_config)
query_job.result()  # Waits for job to complete
print('Query results loaded back into mydataset.mytable')
_________________________________

selcting all data from table and placing in other table:

from google.cloud import bigquery
client = bigquery.Client()
query = """SELECT Currency_code as cc,
Country_code as dd,
id as ffg
FROM `qwiklabs-gcp-03-3660f9116494.BITest.country` LIMIT 10
"""


job_config = bigquery.QueryJobConfig(
    destination="qwiklabs-gcp-03-3660f9116494.BITest.demodemo", write_disposition='WRITE_TRUNCATE')

query_job = client.query(query, job_config=job_config)
query_job.result()  # Waits for job to complete
print('Query results loaded back into mydataset.mytable')
______________________________________________
empty working 
append 
truncate previouus data: working

___________________________________________
from google.cloud import bigquery
client = bigquery.Client()
query = """SELECT
  date,
  GENERATE_UUID() AS Unique_Key,
  ROW_NUMBER() OVER() AS Date_Id,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  EXTRACT(DAY FROM date) AS Year_day,
  EXTRACT(WEEK FROM date) AS Year_Week,
  EXTRACT(MONTH FROM date) AS Year_month,
  EXTRACT(YEAR FROM date) AS Year,
  FORMAT_DATE("%A", date) as Week_Full_Week,
  FORMAT_DATE("%B", date) as Month_Full_Week,
  EXTRACT(QUARTER FROM date) AS year_Qtr,
  EXTRACT(month from date_add(date, interval (12-4)+1 month)) as Fiscal_Month,
  case when EXTRACT(MONTH FROM  date)>=4 then EXTRACT(YEAR FROM  date)
  ELSE EXTRACT(YEAR FROM  date)-1
  END As FISCAL_YEAR,
  DATE_ADD(date, INTERVAL 100 YEAR) AS After_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS Before_hun_yrs,
  FORMAT_DATE("%Y/%B",date) AS Yearmonth,
  FORMAT_DATE("%Y%m", date) as Y_m,
  FORMAT_DATE("%y%b%d",date) AS Full_date1,
FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', '2023-03-31')) AS date 
ORDER BY Date"""

job_config = bigquery.QueryJobConfig(
    destination="qwiklabs-gcp-00-8da3f4c7c227.BITest1.rough", write_disposition='WRITE_APPEND')

query_job = client.query(query, job_config=job_config)
query_job.result()  # Waits for job to complete
print('Query results loaded back into mydataset.mytable')