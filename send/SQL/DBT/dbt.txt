  {{
    config(
        materialized='table'
    )
}} 
with source as (
select * from `bfsi-ai-data-usecase-98uh7.BITest1.car`
)
select * from source

#creste table from taking cars data and then create asource.sql table.



____________________________________
#adding one more column to existing table:

  {{
    config(
        materialized='table'
    )
}} 
with source as (
select * from `bfsi-ai-data-usecase-98uh7.BITest1.car`
)
select *,current_timestamp as i_t from source

"i_t" col added at asource.sql



__________________________________________


#ref:

{{config(materialized='table')}} 

select 
    v_t1 as v_t111,
    G_c1 as G_c111 ,
    t_o1 as t_o111
    from {{ref('stage1')}}


    
_______________________________

*jaffel shop order:
# to store  orders table from diff project to BITest1 dataset   o/p:all records of orders will get


{{config(materialized='table')}} 
with source as (
select * from `dbt-tutorial.jaffle_shop.orders`
)
select * from source





___________________
# to get only 3 records:  o/p -3 records

{{config(materialized='table')}}  
with source as (
select * from `dbt-tutorial.jaffle_shop.orders`
) 
select * from source limit 3
_________________________________________________
 
                          Source and ref:

{{config(materialized='table')}} 
with source as (
select * from `dbt-tutorial.jaffle_shop.orders`
)
select * from source
+==

ref:
{{config(materialized='table')}} 
select
    id, --select your columns
    user_id,
    order_date
from {{ ref('c') }} --the table/view/model you want to select from
limit 10

_____________________________________

macros:

n.sql:macro file:

{% macro order_bucket()  %}
 case when STATUS='placed' then 'process_started' 
         when STATUS='shipped' then 'inprocess'
         when STATUS='returned' then 'failed'
         when STATUS='completed' then 'done'
         when STATUS='return_pending' then 'r_p'
        else 'high'
    end as order_value_bucket   
{% endmacro %}


rough.sql:

{{config(materialized='table')}}

select
    id,
   user_id,
     {{ order_bucket() }}
from {{ ref('orders') }}

________________________________________________

Seed:to upload csv files.

new1.csv
>dbt seed

________________________________

**DBT :source-  customer.sql- using macros:


{{config(materialized='table')}} 
with source as (
select * from  {{ tables() }}
)
select * from source


macro  tables.sql
_____

{% macro tables()  %}
`dbt-tutorial.data_prep.jaffle_shop_orders`
{% endmacro %}


_________________________________
DBT ref:

{{config(materialized='table')}} 
with source as (
select * from {{ref('customers')}}
) 
select * from source where LAST_NAME='C.' AND LAST_NAME='A.' limit 10


___________________________________________

source.yml or scheme.yml

version: 2
sources:
  - name: payments
    schema: BITestdemo
    description: "new tables working on DBT"
    database: bfsi-ai-data-usecase-98uh7
    tables:
      - name: customers
        description: "customers table"
      - name: jaffle_shop_customers
      - name: jaffle_shop_orders
      - name: my_first_dbt_model
      - name: orders
      - name: demo
           
______________________________________________
Adding 2 datasets in source yaml

version: 2
sources:
  - name: BITestdemo
    schema: BITestdemo
    description: "new tables working on DBT"
    database: bfsi-ai-data-usecase-98uh7
    tables:
      - name: customers
        description: "customers table"
      - name: jaffle_shop_customers
      - name: jaffle_shop_orders
      - name: my_first_dbt_model
      - name: orders
      - name: demo
      - name: Window1
      - name: window

  - name: BITest1
    schema: BITest1
    description: "new tables working on DBT"
    database: bfsi-ai-data-usecase-98uh7
    tables:
      - name: car
        description: "carstable"
      - name: NEW1
      - name: rough
           

demo.sql: when tables no there in DBT use source('BITest1','car'):

{{config(materialized='table')}} 
with source as (
select * from {{source('BITest1','car')}}
) 
select * from source 


__________________________________________________

 						*EXAMPLES*


Filters IN operator:
{{config(materialized='table')}} 
with source as (
select * from {{ref('customers')}}
) 
select * from source where LAST_NAME IN('C.','A.') limit 10

____________________________________________________
alias:

{{config(materialized='table')}} 
with source as (
select ca.id,last_name from {{ref('customers')}} as ca
) 
select * from source where LAST_NAME IN('C.','A.') limit 10
____________________________________________________

joins:2-tables:

{{config(materialized='table')}} 
with source as (
select c.id,jc.last_name,c.first_name 
from {{ref('customers')}} as c
inner join  {{ref('jaffle_shop_customers')}} as jc
on c.id=jc.id
) 
select * from source where LAST_NAME IN('C.','A.','B.') limit 20
__________________________________________________________________
aggregations:sum

count:

{{config(materialized='table')}} 
with source as (
select count(Emp_id) as count from {{ref('window')}}
) 
select * from source  
o/p:25



________________________________________________________________
where and limit:

{{config(materialized='table')}} 
with source as (
select * from {{ref('customers')}}
) 
select * from source where LAST_NAME='C.' limit 3
________________________________________________________________
gropu by


{{config(materialized='table')}} 
with source as (
select Dept_name from {{ref('window')}}
) 
select * from source  group by Dept_name



{{config(materialized='table')}} 
with source as (
select Manufacturer from {{ref('car')}}
) 
select * from source group by Manufacturer   LIMIT 1000 

__________________________________________________

