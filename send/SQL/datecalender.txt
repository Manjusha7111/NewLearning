										*DATE FUNCTIONS*

Date:
select current_date();   

----------------------------------------------
??syntax:
DATE(year, month, day): DATE(2019, 10, 05) AS date_ymd
DATE(timestamp_expression):DATE(DATETIME '2023-10-25 23:59:59') AS date_d
DATE(timestamp_expression, time_zone_expression):DATE(TIMESTAMP '2016-10-25 05:30:00+07', 'America/Los_Angeles') AS date_tstz

eg:
SELECT
  DATE(2019, 10, 05) AS date_ymd,
  DATE(DATETIME '2023-10-25 23:59:59') AS date_dt,
  DATE(TIMESTAMP '2016-10-25 05:30:00+07', 'America/Los_Angeles') AS date_tstz;??
____________________________________________________________________________________________________________________________
DATE_ADD:
________
sy:DATE_ADD(date_expression, INTERVAL int64_expression date_part)---- day,month,year

SELECT DATE_ADD(DATE '2023-09-20', INTERVAL 5 DAY) AS five_days_later;
o/p:    five_days_later	
        2023-09-25

SELECT DATE_ADD(DATE '2023-09-20', INTERVAL 2 MONTH) AS f;
o/p:    f	
        2023-11-20

SELECT DATE_ADD(DATE '2023-09-20', INTERVAL 2 YEAR) AS f;
o/p:    f	
        2025-11-20
--------------------------------------------------------------------------------------------------------
DATE_SUB
________
sy:DATE_SUB(date_expression, INTERVAL int64_expression date_part)

eg:SELECT DATE_SUB(DATE '2023-09-25', INTERVAL 5 DAY) AS five_days_ago;    2023-09-20

eg:SELECT DATE_SUB(DATE '2023-09-25', INTERVAL 5 WEEK) AS five_days_ago;   2023-08-21


--------------------------------------------------------------------------------------------------------
DTE_DIFF
_________
Sy:DATE_DIFF(date_expression_a, date_expression_b, date_part)

SELECT DATE_DIFF(DATE '2023-09-07', DATE '2008-12-25', DAY) AS days_diff;    53323
SELECT DATE_DIFF(DATE '2023-09-07', DATE '2008-12-25', MONTH) AS days_diff;   177
SELECT DATE_DIFF(DATE '2023-09-07', DATE '2008-12-25', YEAR) AS days_diff;    15
SELECT DATE_DIFF(DATE '2023-09-07', DATE '2008-12-25', WEEK) AS days_diff;    767

---------------------------------------------------------------------------------------
DATE_TRUNC:always rounding to the begining:
SELECT DATE_TRUNC(DATE '2008-11-30', MONTH) AS month;   2008-11-01
SELECT DATE_TRUNC(DATE '2008-11-30', YEAR) AS month;    2008-01-01
*date will not work
_____________________________________________________________________________________________

EXTRACT(part FROM date_expression)
_______

SELECT EXTRACT(DAY FROM DATE '2013-12-25') AS the_day;  25
SELECT EXTRACT(MONTH FROM DATE '2013-12-25') AS the_m;   12
SELECT EXTRACT(YEAR FROM DATE '2013-12-25') AS the_m;     2023

TIME:
SELECT EXTRACT(MINUTE FROM DATETIME ('2023-10-25 23:58:59')) AS minute;     58
SELECT EXTRACT(HOUR FROM DATETIME ('2023-10-25 23:58:59')) AS minute;       23
________________________________________________________________
FORMAT_DATE:
____________
%d %B %Y -   21 February 2023     B-full month name   %A=week
%x- MM/DD/YY     

SELECT FORMAT_DATE('%x', DATE '2023-12-25') AS US_format;      12/25/23

SELECT FORMAT_DATE('%b-%d-%Y', DATE '2023-12-25') AS formatted;    Dec-25-2023

SELECT FORMAT_DATE('%b %Y', DATE '2008-12-25') AS formatted;    Dec 2008 
-----------------------------------------------------------------------------------
DATE-1 example:
______________
create table BITest.date1
(
start_date DATE,
end_date DATE,
  id integer,

)
OPTIONS(
  
  description="MY TABLE"
);


insert into `BITest.date1` values('2023-01-01','2024-01-05',1),
('2023-01-11','2026-01-15',2),
('2023-01-21','2025-01-25',3);

-SELECT start_date,end_date, DATE_DIFF(end_date,start_date,DAY) as T from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;

-SELECT start_date,end_date, EXTRACT(DAY FROM  start_date) AS T from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;
SELECT start_date,end_date, EXTRACT(MONTH FROM  start_date) AS T from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;


-SELECT start_date,end_date,DATE_ADD(start_date, INTERVAL 10 DAY) AS T  from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;

-SELECT start_date,end_date,DATE_SUB(start_date, INTERVAL 10 DAY) AS T  from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;

-SELECT DATE_SUB(DATE '2023-09-25', INTERVAL 200 YEAR) AS five_days_ago;

-SELECT start_date,end_date,DATE_ADD(start_date, INTERVAL 100 YEAR) AS T  from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;

-SELECT start_date,end_date, FORMAT_DATE("%b-%d-%Y", start_date) AS T from `bfsi-ai-data-usecase-98uh7.BITest.date1` ORDER BY T DESC ;  Jan-21-2023

_____________________________________________________________________________________________________






CALENDER:
________

unnest:To convert an ARRAY into a set of rows


SELECT
  date,
  FORMAT_DATE("%A", date) as Day_OF_WEEK,
  extract(week from date) as year_week,
  EXTRACT(DAY FROM date) as the_day,FROM UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-12-31')) AS Date
ORDER BY date;
_________________________________________________________________________________________________



Key:
__________
*GENERATE_UUID()- generates universally unique identifier (UUID) as a STRING.
*OFFSET- means that the numbering starts at zero to an array
*UNNEST -is a powerful function that can be used to break down an array into its individual row elements. 
*ROW_NUMBER () over ()-provide consecutive numbering of the rows in the result/Gets the sequential row number
*CAST(FLOOR(300 * RAND()))-Convert the results of an expression to the given type/With CAST  we can convert from one data type to another.
_____________
1)SELECT
  id,date
  ,GENERATE_UUID() AS uuid,
  EXTRACT(DAY FROM date) as the_day,
 from UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-12-31')) AS Date 
 WITH OFFSET AS id
ORDER BY id;


2)SELECT
   date,k1
  ,ROW_NUMBER() OVER() AS ID1,
  GENERATE_UUID() AS s_key,
  CAST(FLOOR(300 * RAND()) AS STRING) AS col1
 from UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-12-31')) AS Date CROSS JOIN
 UNNEST(GENERATE_ARRAY(1,365)) AS k1
 ORDER BY date;
_______________________
eq:unnest :
_________
SELECT *
FROM UNNEST(['foo', 'bar', 'baz', 'qux', 'corge', 'garply', 'waldo', 'fred'])
  AS element
WITH OFFSET AS offset
ORDER BY offset;
______________________________

create table `BITest.daateeq1`(
SurrogateKey INTEGER,
year date,month date,day date,wikimedia_project string,language string,,title string,views integer

);


INSERT INTO `BITest.daateeq1`
(SurrogateKey,year,month,day,wikimedia_project,language,title,views)
SELECT (SHA256(title)) AS SurrogateKey,*
FROM `BITest.daateeq1`







_______________________________________________________________
*montly _week :
  _______
select DATE_DIFF('2023-03-05',DATE_TRUNC('2023-03-05',MONTH),WEEK)+1 as week_number;
select DATE_DIFF(CURRENT_DATE(),DATE_TRUNC(CURRENT_DATE(),MONTH),WEEK)+1 as week_number;
------------------------------------------------------------------
*yearly week:
  ______
SELECT EXTRACT(WEEK FROM DATE '2013-12-25') AS the_day;
-------------------------------------------------------------------------
*last_day: last day of week:
  ____
SELECT LAST_DAY(DATETIME '2023-09-14 11:45:00', WEEK(SUNDAY))
__________________________________________
*CAST:SELECT CAST(CURRENT_DATETIME() AS DATE);
 ___
____________________________________________________________________
*TIME:
  __
SELECT TIME_SUB('10:00:01', INTERVAL 3 HOUR) as hour_earlier     07:00:01
SELECT TIME_ADD('10:00:01', INTERVAL 3 HOUR) as hour_earlier     13:00:01
_________________________________________________________________________
*changing formats:
  __________
SELECT FORMAT_DATE("%y/%B/%d",PARSE_DATE("%B %d, %Y","June 10, 2014")) AS date_str   14/June/10
SELECT FORMAT_DATE("%Y/%b/%d",PARSE_DATE("%B %d, %Y","June 10, 2014")) AS date_str    2014/Jun/10

_________________________________________________________________________________




SELECT
  date,
  GENERATE_UUID() AS s_key,
  EXTRACT(DAY FROM date) as year_day,
  EXTRACT(MONTH FROM date) as year_month,
  EXTRACT(WEEK FROM date) AS year_week,
  EXTRACT(YEAR FROM date) AS year,
  EXTRACT(QUARTER FROM date) AS year_qtr,
  EXTRACT(MONTH from date_add(date, interval 6 month)) as fiscal_month,
  EXTRACT(YEAR from date_add(date, interval 6 month)) as fiscal_year,
  DATE_ADD(date, INTERVAL 100 YEAR) AS after_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS before_hun_yrs,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  FORMAT_DATE("%Y/%B",date) AS Year_month,
  FORMAT_DATE("%B", date) as Month_Name_Full,
  FORMAT_DATE("%Y%m", date) as Y_M,
   FORMAT_DATE("%Y%B%d",date) AS Full_date1,
  from UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-12-31')) AS date 
  
  ORDER BY Date;

__________________________________________________________
***SELECT LAST_DAY(DATETIME '2023-09-14 11:45:00', MONTH);        where date='2023-07-01'
___________________________________________
Every month info:

SELECT
  date,
  extract(month from date) as calendar_month,
  extract(year from date) as calendar_year,
  extract(month from date_add(date, interval 6 month)) as fiscal_month,
  extract(year from date_add(date, interval 6 month)) as fiscal_year,
from unnest(generate_date_array('2020-01-01', '2021-12-31', interval 1 month)) as date
order by date; 


---------------------------------------------------------------

fiscal -starts any month goes for next consecutive 12 month period 
july2019- june 2020----- fiscal yr -2020
apr and sep 2020

priya:
select
DATE '2024-01-01' As Your_date,
EXTRACT(YEAR FROM DATE '2024-01-01') as CALENDAR_YEAR,
case
when EXTRACT(MONTH FROM DATE '2024-01-01')>= 4 then EXTRACT(MONTH FROM DATE '2024-01-01')-4+1
ELSE EXTRACT(MONTH FROM DATE '2024-01-01')+(12-4)+1
end as fiscal_month,
case
when EXTRACT(MONTH FROM DATE '2024-01-01')>=4 then EXTRACT(YEAR FROM DATE '2024-01-01')
ELSE EXTRACT(YEAR FROM DATE '2024-01-01')-1
END As FISCAL_YEAR
___________________________________________________

SELECT
  date,
  GENERATE_UUID() AS s_key,
  EXTRACT(DAY FROM date) as year_day,
  EXTRACT(MONTH FROM date) as year_month,
  EXTRACT(WEEK FROM date) AS year_week,
  EXTRACT(YEAR FROM date) AS year,
  EXTRACT(month from date_add(date, interval (12-4)+1 month)) as fiscal_month,
  case when EXTRACT(MONTH FROM  date)>=4 then EXTRACT(YEAR FROM  date)
  ELSE EXTRACT(YEAR FROM  date)-1
  END As FISCAL_YEAR,
  DATE_ADD(date, INTERVAL 100 YEAR) AS after_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS before_hun_yrs,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  FORMAT_DATE("%Y/%B",date) AS Year_month,
  FORMAT_DATE("%B", date) as Month_Name_Full,
  FORMAT_DATE("%Y%m", date) as Y_M,
   FORMAT_DATE("%Y%B%d",date) AS Full_date1,
  from UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2024-12-31')) AS date 
  where date= '2024-05-01'
  ORDER BY Date;
__________________________________________________________________________________
$$$

SELECT
  date,
  GENERATE_UUID() AS Unique_Key,
  ROW_NUMBER() OVER() AS Date_Id,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  EXTRACT(DAY FROM date) AS Year_day,
  EXTRACT(WEEK FROM date) AS Year_Week,
  EXTRACT(MONTH FROM date) AS Year_month,
  EXTRACT(YEAR FROM date) AS Year,
  FORMAT_DATE("%A", date) as Week_Full_Week,
  FORMAT_DATE("%B", date) as Month_Full_Week,
  EXTRACT(QUARTER FROM date) AS year_Qtr,
  EXTRACT(month from date_add(date, interval (12-4)+1 month)) as Fiscal_Month,
  case when EXTRACT(MONTH FROM  date)>=4 then EXTRACT(YEAR FROM  date)
  ELSE EXTRACT(YEAR FROM  date)-1
  END As FISCAL_YEAR,
  DATE_ADD(date, INTERVAL 100 YEAR) AS After_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS Before_hun_yrs,
  FORMAT_DATE("%Y/%B",date) AS Yearmonth,
  FORMAT_DATE("%Y%m", date) as Y_m,
  FORMAT_DATE("%y%b%d",date) AS Full_date1,
FROM UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2024-12-31')) AS date 
ORDER BY Date;

select * from `BITest.calenderdemo`;
_______________________________________________________________

CREATE MATERIALIZED VIEW  BITest.calenderdemo171 AS (
  SELECT
   Full_date,Year_month,Week_Full_Week
  FROM
    BITest.calenderdemo
  
);
_____________________________________________________________---
from google.cloud import bigquery
client=bigquery.Client(project="bfsi-ai-data-usecase-98uh7")
q="""SELECT
  date,
  GENERATE_UUID() AS Unique_Key,
  ROW_NUMBER() OVER() AS Date_Id,
  FORMAT_DATE("%Y/%B/%d",date) AS Full_date,
  EXTRACT(DAY FROM date) AS Year_day,
  EXTRACT(WEEK FROM date) AS Year_Week,
  EXTRACT(MONTH FROM date) AS Year_month,
  EXTRACT(YEAR FROM date) AS Year,
  FORMAT_DATE("%A", date) as Week_Full_Week,
  FORMAT_DATE("%B", date) as Month_Full_Week,
  EXTRACT(QUARTER FROM date) AS year_Qtr,
  EXTRACT(month from date_add(date, interval (12-4)+1 month)) as Fiscal_Month,
  case when EXTRACT(MONTH FROM  date)>=4 then EXTRACT(YEAR FROM  date)
  ELSE EXTRACT(YEAR FROM  date)-1
  END As FISCAL_YEAR,
  DATE_ADD(date, INTERVAL 100 YEAR) AS After_hun_yrs,
  DATE_SUB(date, INTERVAL 100 YEAR) AS Before_hun_yrs,
  FORMAT_DATE("%Y/%B",date) AS Yearmonth,
  FORMAT_DATE("%Y%m", date) as Y_m,
  FORMAT_DATE("%y%b%d",date) AS Full_date1,
FROM UNNEST(GENERATE_DATE_ARRAY('2023-01-01', '2023-03-31')) AS date 
ORDER BY Date"""

query_job=client.query(q)
res=query_job.result()
for i in res:
    print(i)
   