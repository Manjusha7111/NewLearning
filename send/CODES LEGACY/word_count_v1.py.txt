import re  
import apache_beam as beam 
from apache_beam.io import ReadFromText
from apache_beam.io import WriteToText
from apache_beam.options.pipeline_options import PipelineOptions
# Define a function to count words in a line
def count_words(line):
    return len(re.findall(r'[\w\']+', line, re.UNICODE))
 
# Define your pipeline options
class CustomPipelineOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_value_provider_argument('--input', type=str, help='Input for the pipeline', default='gs://tnt01-odycda-bld-01-stb-eu-rawzone-52fd7181/INTERNAL/MFVS/MIP/staging/client_full_v1.csv')
        parser.add_value_provider_argument('--output', type=str, help='Output for the pipeline', default='gs://tnt01-odycda-bld-01-stb-eu-certzone-3067f5f0/dataflow')
 
# Set up the Beam pipeline options
options = CustomPipelineOptions(
    runner='DataflowRunner',
    project='tnt01-odycda-bld-01-1b81',
    job_name='wordcount-example',
    temp_location='gs://tnt01-odycda-bld-01-stb-eu-rawzone-52fd7181/dataflow/test/temp',
    staging_location='gs://tnt01-odycda-bld-01-stb-eu-rawzone-52fd7181/dataflow/staging',
    region='europe-west2', 
    service_account_email ='svc-dfl-user@tnt01-odycda-bld-01-1b81.iam.gserviceaccount.com',
    dataflow_kms_key='projects/tnt01-odykms-bld-01-35d7/locations/europe-west2/keyRings/krs-kms-tnt01-euwe2-cdp/cryptoKeys/keyhsm-kms-tnt01-euwe2-cdp',
    subnetwork='https://www.googleapis.com/compute/v1/projects/tnt01-hst-bld-e88b/regions/europe-west2/subnetworks/odycda-csn-euwe2-kcl-01-bld-01',
    num_workers = 1,
    max_num_workers =3,
    use_public_ips=False,
)
 
# Create the pipeline with the specified options
with beam.Pipeline(options=options) as p:
    # Read from an input text file
    lines = p | 'Read' >> beam.io.ReadFromText(options.input)
 
    # Count the words in each line
    counts = (lines
              | 'CountWords' >> beam.Map(count_words))
 
    # Write the counts to an output text file
    counts | 'Write' >> beam.io.WriteToText(options.output)